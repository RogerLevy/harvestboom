require config/options.vfx
require config/allegro.vfx
cwd ../vfxland3
require lib/vl3/vfxland3.vfx
require lib/csv.vfx
require plugins/obj1.vfx
require plugins/bitmaps2.vfx
cwd %idir%

%object sizeof
    objvar tm-cols  \ scalar
    objvar tm-rows  \ scalar
    objvar tm-dcols  \ scalar
    objvar tm-drows  \ scalar
    objvar tm-base  \ addr
    objvar tm-stride
    objvar tm-scrollx  \ scalar
    objvar tm-scrolly  \ scalar
    objvar tm-tw  \ scalar
    objvar tm-th  \ scalar
    objvar tm-ts  \ addr
create %tilemap , 0 ,

include ../vfxland3/plugins/tilemap2.vfx
include ../vfxland3/plugins/tilecol1.vfx
include ../vfxland3/lib/files1.vfx

-sin  \ disable tokenization of all definitions from here

\ ------------------------------------------------------------------------------

create alevt /ALLEGRO_EVENT allot&erase

\ ------------------------------------------------------------------------------

: load-static-array  create read> lines> csv> evaluate , ;
s" data/leveltest.csv" load-static-array testarr
z" data/castle-tileset.png" loadbmp constant castle.bmp
create castle.ts  castle.bmp 16 16 >tiles,

: ,,  0 do dup , loop  drop ;
create floorarr  25 20 15 * ,,

\ ------------------------------------------------------------------------------

: move-about
    0 0 vx v!
    <up> held? if -1 vy s! then
    <down> held? if 1 vy s! then
    <left> held? if -1 vx s! then
    <right> held? if 1 vx s! then ;

%object extend
    objvar map
    
    : lay-gems
        <space> held? if
            65 x v@ 16 / swap 16 / swap map @ tileloc !
        then ;
        
    : /barrel
        16 16 w v!
        step> move-about lay-gems
        motion>  map @ ?dup if  collide-tilemap  then  vx fv@ x fv+!  
        draw> 58 castle.ts tile ;

create %barrel , ' /barrel ,

\ ------------------------------------------------------------------------------

create root 0 0 pool  
create fl  %tilemap static  floorarr castle.ts 20 15 /tilemap
create lv  %tilemap static  testarr castle.ts 20 15 /tilemap
create barrel %barrel static  lv map !  50 50 x v!  0 0 vx v!

\ ------------------------------------------------------------------------------

: handle-events
    begin  queue alevt al_get_next_event  while
        \ alevt ALLEGRO_EVENT.type @ ALLEGRO_EVENT_MOUSE_BUTTON_DOWN = if
        \ then 
    repeat ;

: >display
    reset-keyboard 
    display al_get_win_window_handle SetForegroundWindow drop
    identity 0e 0e 0e 2e 2e transformed ;

: >vfx
    mswin? if
        vfx-hwnd SetForegroundWindow drop
    then ;

: poll  poll-keyboard poll-mouse ;
: cls  0.5e 0.25e 0e 1e al_clear_to_color ;
: think  each>  'step @ ?execute  -1 ;
: motion  each>  'motion @ ?execute  -1 ;
: advance  poll  handle-events  dup think  motion ;
: render  each>  x v@ at  'draw @ ?execute  -1 ; 
: present  display al_flip_display ;
: frame  root advance  cls  root render  present ;
: go  >display  begin frame pause  <escape> pressed? until  >vfx ;

\ go