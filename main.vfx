require config/options.vfx
include config/allegro.vfx
cwd vfxland3
require lib/vl3/vfxland3.vfx
require lib/csv.vfx
require plugins/obj1.vfx
require plugins/bitmaps2.vfx
require plugins/delta.vfx
cwd %idir%

%object sizeof
    var tm-cols  \ scalar
    var tm-rows  \ scalar
    var tm-dcols  \ scalar
    var tm-drows  \ scalar
    var tm-base  \ addr
    var tm-stride
    var tm-scrollx  \ scalar
    var tm-scrolly  \ scalar
    var tm-tw  \ scalar
    var tm-th  \ scalar
    var tm-ts  \ addr
create-kind %tilemap

include vfxland3/plugins/tilemap2.vfx
include vfxland3/plugins/tilecol1.vfx
include vfxland3/lib/files1.vfx
include lib/str.vfx

-sin  \ disable tokenization of all definitions from here

\ ------------------------------------------------------------------------------

: read-csv,  read> lines> csv> evaluate , ;

s" tiled/1-1_active1.csv"  create active.arr  read-csv,

z" assets/castle-tileset.png" loadbmp constant castle.bmp
create castle.ts  castle.bmp 16 16 tileset

z" assets/Simple Farm Packv12-export-export.png" loadbmp constant farm.bmp
create farm.ts  farm.bmp 16 16 tileset

s" tiled/1-1_ground1.csv"  create ground1.arr read-csv,
s" tiled/1-1_ground2.csv"  create ground2.arr read-csv,

\ ------------------------------------------------------------------------------

variable level

\ ------------------------------------------------------------------------------

include kinds/player.vfx
include scene.vfx 
include tile-objects.vfx
include levels.vfx

\ ------------------------------------------------------------------------------

create alevt /ALLEGRO_EVENT allot&erase

: handle-events
    begin  queue alevt al_get_next_event  while
        \ alevt ALLEGRO_EVENT.type @ ALLEGRO_EVENT_MOUSE_BUTTON_DOWN = if
        \ then 
    repeat ;

: >display
    reset-keyboard 
    display al_get_win_window_handle SetForegroundWindow drop
    identity 0e 0e 0e 2e 2e transformed
    !delta ;

: >vfx
    mswin? if
        vfx-hwnd SetForegroundWindow drop
    then ;

: poll  poll-keyboard poll-mouse ;
: advance  [[ step  motion ]] ;
: render  [[ draw ]] ;
: present  display al_flip_display ;
: frame  poll  handle-events  root advance  root render  present ;
: go  >display  begin !delta  frame pause  <escape> pressed? until  >vfx ;

\ go